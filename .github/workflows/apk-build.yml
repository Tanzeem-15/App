name: Build and Sign APK

on:
  # Trigger when a new comment is created on issues/PRs
  issue_comment:
    types: [created]

# Minimal permissions; issues:write to reply in PR thread
permissions:
  contents: read
  pull-requests: read
  issues: write

jobs:
  build:
    name: Generate Signed APK
    # Run only when:
    # - The comment is on a PR (not a plain issue)
    # - The comment starts with "/build-apk"
    # - The commenter is a repo MEMBER/OWNER/COLLABORATOR
    if: >
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/build-apk') &&
      contains('MEMBER,OWNER,COLLABORATOR', github.event.comment.author_association)
    runs-on: ubuntu-latest

    steps:
      - name: Acknowledge command
        uses: actions/github-script@v7
        with:
          script: |
            const prNum = context.payload.issue.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNum,
              body: `üëã Received command \`${context.payload.comment.body.trim()}\`. Validating and starting build‚Ä¶`
            });

      - name: Get PR metadata
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const prNum = context.payload.issue.number;
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNum,
            });
            core.setOutput('head_repo', pr.data.head.repo.full_name);
            core.setOutput('head_ref',  pr.data.head.ref);
            core.setOutput('base_repo', pr.data.base.repo.full_name);
            core.setOutput('base_ref',  pr.data.base.ref);

      # SECURITY: Do NOT run a signed build with secrets on code from forks
      - name: Guard against forked PRs
        id: fork-guard
        run: |
          if [ "${{ steps.pr.outputs.head_repo }}" != "${{ steps.pr.outputs.base_repo }}" ]; then
            echo "This is a forked PR; refusing to run a signed build with secrets."
            echo "skip=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Inform and skip on forked PR
        if: steps.fork-guard.outputs.skip == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNum = context.payload.issue.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNum,
              body: "‚ö†Ô∏è Skipping: This PR originates from a fork. For security, signed builds with repository secrets don't run on forked PRs."
            });

      - name: Stop job on forked PR
        if: steps.fork-guard.outputs.skip == 'true'
        run: exit 0

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.pr.outputs.head_repo }}
          ref: ${{ steps.pr.outputs.head_ref }}
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install npm dependencies
        run: npm ci

      - name: Decode Keystore from Secret
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/my-release-key.keystore

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Build Signed Release APK
        working-directory: android
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: ./gradlew assembleRelease --no-daemon

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: MobileApp.apk
          path: android/app/build/outputs/apk/release/app-release.apk
          if-no-files-found: error

      - name: Comment build result
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const prNum = context.payload.issue.number;
            const ok = '${{ job.status }}' === 'success';
            const msg = ok
              ? "‚úÖ Signed APK built successfully. Download it from the **Artifacts** section of this run (MobileApp.apk)."
              : "‚ùå Build failed. Please check the workflow logs for details.";
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNum,
              body: msg
            });
